// Generated by gencpp from file sdf_pub/ComputeSDFRequest.msg
// DO NOT EDIT!


#ifndef SDF_PUB_MESSAGE_COMPUTESDFREQUEST_H
#define SDF_PUB_MESSAGE_COMPUTESDFREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sdf_pub
{
template <class ContainerAllocator>
struct ComputeSDFRequest_
{
  typedef ComputeSDFRequest_<ContainerAllocator> Type;

  ComputeSDFRequest_()
    : request_new(false)  {
    }
  ComputeSDFRequest_(const ContainerAllocator& _alloc)
    : request_new(false)  {
  (void)_alloc;
    }



   typedef uint8_t _request_new_type;
  _request_new_type request_new;





  typedef boost::shared_ptr< ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ComputeSDFRequest_

typedef ::sdf_pub::ComputeSDFRequest_<std::allocator<void> > ComputeSDFRequest;

typedef boost::shared_ptr< ::sdf_pub::ComputeSDFRequest > ComputeSDFRequestPtr;
typedef boost::shared_ptr< ::sdf_pub::ComputeSDFRequest const> ComputeSDFRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sdf_pub

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sdf_pub': ['/home/edmund/test_ws/src/sdf_pub/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70082b15c0185876dcce41c4eb98be14";
  }

  static const char* value(const ::sdf_pub::ComputeSDFRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70082b15c0185876ULL;
  static const uint64_t static_value2 = 0xdcce41c4eb98be14ULL;
};

template<class ContainerAllocator>
struct DataType< ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdf_pub/ComputeSDFRequest";
  }

  static const char* value(const ::sdf_pub::ComputeSDFRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool request_new\n\
";
  }

  static const char* value(const ::sdf_pub::ComputeSDFRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.request_new);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ComputeSDFRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdf_pub::ComputeSDFRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdf_pub::ComputeSDFRequest_<ContainerAllocator>& v)
  {
    s << indent << "request_new: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.request_new);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDF_PUB_MESSAGE_COMPUTESDFREQUEST_H
